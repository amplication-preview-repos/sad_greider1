/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Structure } from "./Structure";
import { StructureCountArgs } from "./StructureCountArgs";
import { StructureFindManyArgs } from "./StructureFindManyArgs";
import { StructureFindUniqueArgs } from "./StructureFindUniqueArgs";
import { CreateStructureArgs } from "./CreateStructureArgs";
import { UpdateStructureArgs } from "./UpdateStructureArgs";
import { DeleteStructureArgs } from "./DeleteStructureArgs";
import { InspectionFindManyArgs } from "../../inspection/base/InspectionFindManyArgs";
import { Inspection } from "../../inspection/base/Inspection";
import { StructureService } from "../structure.service";
@graphql.Resolver(() => Structure)
export class StructureResolverBase {
  constructor(protected readonly service: StructureService) {}

  async _structuresMeta(
    @graphql.Args() args: StructureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Structure])
  async structures(
    @graphql.Args() args: StructureFindManyArgs
  ): Promise<Structure[]> {
    return this.service.structures(args);
  }

  @graphql.Query(() => Structure, { nullable: true })
  async structure(
    @graphql.Args() args: StructureFindUniqueArgs
  ): Promise<Structure | null> {
    const result = await this.service.structure(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Structure)
  async createStructure(
    @graphql.Args() args: CreateStructureArgs
  ): Promise<Structure> {
    return await this.service.createStructure({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Structure)
  async updateStructure(
    @graphql.Args() args: UpdateStructureArgs
  ): Promise<Structure | null> {
    try {
      return await this.service.updateStructure({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Structure)
  async deleteStructure(
    @graphql.Args() args: DeleteStructureArgs
  ): Promise<Structure | null> {
    try {
      return await this.service.deleteStructure(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Inspection], { name: "inspections" })
  async findInspections(
    @graphql.Parent() parent: Structure,
    @graphql.Args() args: InspectionFindManyArgs
  ): Promise<Inspection[]> {
    const results = await this.service.findInspections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
