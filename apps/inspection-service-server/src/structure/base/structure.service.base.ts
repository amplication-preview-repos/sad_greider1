/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Structure as PrismaStructure,
  Inspection as PrismaInspection,
} from "@prisma/client";

export class StructureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StructureCountArgs, "select">
  ): Promise<number> {
    return this.prisma.structure.count(args);
  }

  async structures(
    args: Prisma.StructureFindManyArgs
  ): Promise<PrismaStructure[]> {
    return this.prisma.structure.findMany(args);
  }
  async structure(
    args: Prisma.StructureFindUniqueArgs
  ): Promise<PrismaStructure | null> {
    return this.prisma.structure.findUnique(args);
  }
  async createStructure(
    args: Prisma.StructureCreateArgs
  ): Promise<PrismaStructure> {
    return this.prisma.structure.create(args);
  }
  async updateStructure(
    args: Prisma.StructureUpdateArgs
  ): Promise<PrismaStructure> {
    return this.prisma.structure.update(args);
  }
  async deleteStructure(
    args: Prisma.StructureDeleteArgs
  ): Promise<PrismaStructure> {
    return this.prisma.structure.delete(args);
  }

  async findInspections(
    parentId: string,
    args: Prisma.InspectionFindManyArgs
  ): Promise<PrismaInspection[]> {
    return this.prisma.structure
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inspections(args);
  }
}
