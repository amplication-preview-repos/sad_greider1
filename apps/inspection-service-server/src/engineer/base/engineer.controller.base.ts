/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EngineerService } from "../engineer.service";
import { EngineerCreateInput } from "./EngineerCreateInput";
import { Engineer } from "./Engineer";
import { EngineerFindManyArgs } from "./EngineerFindManyArgs";
import { EngineerWhereUniqueInput } from "./EngineerWhereUniqueInput";
import { EngineerUpdateInput } from "./EngineerUpdateInput";
import { InspectionFindManyArgs } from "../../inspection/base/InspectionFindManyArgs";
import { Inspection } from "../../inspection/base/Inspection";
import { InspectionWhereUniqueInput } from "../../inspection/base/InspectionWhereUniqueInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";

export class EngineerControllerBase {
  constructor(protected readonly service: EngineerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Engineer })
  async createEngineer(
    @common.Body() data: EngineerCreateInput
  ): Promise<Engineer> {
    return await this.service.createEngineer({
      data: data,
      select: {
        contactInformation: true,
        createdAt: true,
        id: true,
        licenseNumber: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Engineer] })
  @ApiNestedQuery(EngineerFindManyArgs)
  async engineers(@common.Req() request: Request): Promise<Engineer[]> {
    const args = plainToClass(EngineerFindManyArgs, request.query);
    return this.service.engineers({
      ...args,
      select: {
        contactInformation: true,
        createdAt: true,
        id: true,
        licenseNumber: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Engineer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async engineer(
    @common.Param() params: EngineerWhereUniqueInput
  ): Promise<Engineer | null> {
    const result = await this.service.engineer({
      where: params,
      select: {
        contactInformation: true,
        createdAt: true,
        id: true,
        licenseNumber: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Engineer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEngineer(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() data: EngineerUpdateInput
  ): Promise<Engineer | null> {
    try {
      return await this.service.updateEngineer({
        where: params,
        data: data,
        select: {
          contactInformation: true,
          createdAt: true,
          id: true,
          licenseNumber: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Engineer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEngineer(
    @common.Param() params: EngineerWhereUniqueInput
  ): Promise<Engineer | null> {
    try {
      return await this.service.deleteEngineer({
        where: params,
        select: {
          contactInformation: true,
          createdAt: true,
          id: true,
          licenseNumber: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/inspections")
  @ApiNestedQuery(InspectionFindManyArgs)
  async findInspections(
    @common.Req() request: Request,
    @common.Param() params: EngineerWhereUniqueInput
  ): Promise<Inspection[]> {
    const query = plainToClass(InspectionFindManyArgs, request.query);
    const results = await this.service.findInspections(params.id, {
      ...query,
      select: {
        comments: true,
        createdAt: true,
        date: true,

        engineer: {
          select: {
            id: true,
          },
        },

        id: true,

        structure: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inspections")
  async connectInspections(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: InspectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inspections: {
        connect: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inspections")
  async updateInspections(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: InspectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inspections: {
        set: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inspections")
  async disconnectInspections(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: InspectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inspections: {
        disconnect: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: EngineerWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        endDate: true,

        engineer: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  async connectProjects(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  async updateProjects(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  async disconnectProjects(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
