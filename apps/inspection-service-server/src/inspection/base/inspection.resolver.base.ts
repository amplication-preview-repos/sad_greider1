/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Inspection } from "./Inspection";
import { InspectionCountArgs } from "./InspectionCountArgs";
import { InspectionFindManyArgs } from "./InspectionFindManyArgs";
import { InspectionFindUniqueArgs } from "./InspectionFindUniqueArgs";
import { CreateInspectionArgs } from "./CreateInspectionArgs";
import { UpdateInspectionArgs } from "./UpdateInspectionArgs";
import { DeleteInspectionArgs } from "./DeleteInspectionArgs";
import { PhotoFindManyArgs } from "../../photo/base/PhotoFindManyArgs";
import { Photo } from "../../photo/base/Photo";
import { Engineer } from "../../engineer/base/Engineer";
import { Structure } from "../../structure/base/Structure";
import { InspectionService } from "../inspection.service";
@graphql.Resolver(() => Inspection)
export class InspectionResolverBase {
  constructor(protected readonly service: InspectionService) {}

  async _inspectionsMeta(
    @graphql.Args() args: InspectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Inspection])
  async inspections(
    @graphql.Args() args: InspectionFindManyArgs
  ): Promise<Inspection[]> {
    return this.service.inspections(args);
  }

  @graphql.Query(() => Inspection, { nullable: true })
  async inspection(
    @graphql.Args() args: InspectionFindUniqueArgs
  ): Promise<Inspection | null> {
    const result = await this.service.inspection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Inspection)
  async createInspection(
    @graphql.Args() args: CreateInspectionArgs
  ): Promise<Inspection> {
    return await this.service.createInspection({
      ...args,
      data: {
        ...args.data,

        engineer: args.data.engineer
          ? {
              connect: args.data.engineer,
            }
          : undefined,

        structure: args.data.structure
          ? {
              connect: args.data.structure,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Inspection)
  async updateInspection(
    @graphql.Args() args: UpdateInspectionArgs
  ): Promise<Inspection | null> {
    try {
      return await this.service.updateInspection({
        ...args,
        data: {
          ...args.data,

          engineer: args.data.engineer
            ? {
                connect: args.data.engineer,
              }
            : undefined,

          structure: args.data.structure
            ? {
                connect: args.data.structure,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Inspection)
  async deleteInspection(
    @graphql.Args() args: DeleteInspectionArgs
  ): Promise<Inspection | null> {
    try {
      return await this.service.deleteInspection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Photo], { name: "photos" })
  async findPhotos(
    @graphql.Parent() parent: Inspection,
    @graphql.Args() args: PhotoFindManyArgs
  ): Promise<Photo[]> {
    const results = await this.service.findPhotos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Engineer, {
    nullable: true,
    name: "engineer",
  })
  async getEngineer(
    @graphql.Parent() parent: Inspection
  ): Promise<Engineer | null> {
    const result = await this.service.getEngineer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Structure, {
    nullable: true,
    name: "structure",
  })
  async getStructure(
    @graphql.Parent() parent: Inspection
  ): Promise<Structure | null> {
    const result = await this.service.getStructure(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
