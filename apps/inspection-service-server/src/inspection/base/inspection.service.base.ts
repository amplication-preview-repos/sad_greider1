/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Inspection as PrismaInspection,
  Photo as PrismaPhoto,
  Engineer as PrismaEngineer,
  Structure as PrismaStructure,
} from "@prisma/client";

export class InspectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InspectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.inspection.count(args);
  }

  async inspections(
    args: Prisma.InspectionFindManyArgs
  ): Promise<PrismaInspection[]> {
    return this.prisma.inspection.findMany(args);
  }
  async inspection(
    args: Prisma.InspectionFindUniqueArgs
  ): Promise<PrismaInspection | null> {
    return this.prisma.inspection.findUnique(args);
  }
  async createInspection(
    args: Prisma.InspectionCreateArgs
  ): Promise<PrismaInspection> {
    return this.prisma.inspection.create(args);
  }
  async updateInspection(
    args: Prisma.InspectionUpdateArgs
  ): Promise<PrismaInspection> {
    return this.prisma.inspection.update(args);
  }
  async deleteInspection(
    args: Prisma.InspectionDeleteArgs
  ): Promise<PrismaInspection> {
    return this.prisma.inspection.delete(args);
  }

  async findPhotos(
    parentId: string,
    args: Prisma.PhotoFindManyArgs
  ): Promise<PrismaPhoto[]> {
    return this.prisma.inspection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .photos(args);
  }

  async getEngineer(parentId: string): Promise<PrismaEngineer | null> {
    return this.prisma.inspection
      .findUnique({
        where: { id: parentId },
      })
      .engineer();
  }

  async getStructure(parentId: string): Promise<PrismaStructure | null> {
    return this.prisma.inspection
      .findUnique({
        where: { id: parentId },
      })
      .structure();
  }
}
